<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>这是JavaSE的博客</title>
    <url>/2021/03/05/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>这是为了测试博客</p>
<p>1111111</p>
<p>222222</p>
<p>333333</p>
]]></content>
      <categories>
        <category>java_se</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>这是spring的博客</title>
    <url>/2021/03/05/%E6%96%B0%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这个是新的博客</p>
<p>1111111111</p>
<p>22222222222</p>
<p>33333333333</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC博客</title>
    <url>/2021/03/05/springMVC%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这是关于springMVC的博客</p>
<p>111111111111111</p>
<p>22222222222222</p>
<p>333333333333333</p>
]]></content>
      <categories>
        <category>spring_mvc</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis配置文件详解</title>
    <url>/2021/03/10/MyBatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/1614656397024.png"></p>
<h1 id="1-什么是MyBatis"><a href="#1-什么是MyBatis" class="headerlink" title="1.什么是MyBatis?"></a>1.什么是MyBatis?</h1><p>​        MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h2 id="1-1优点"><a href="#1-1优点" class="headerlink" title="1.1优点:"></a>1.1优点:</h2><ol>
<li>与JDBC相比，减少了50%的代码量</li>
<li>最简单的持久化框架，简单易学</li>
<li>SQL代码从程序代码中彻底分离出来，可以重用</li>
<li>提供XML标签，支持编写动态SQL</li>
<li>提供映射标签，支持对象与数据库的ORM字段关系映射</li>
</ol>
<h2 id="1-2缺点"><a href="#1-2缺点" class="headerlink" title="1.2缺点"></a>1.2缺点</h2><ol>
<li>SQL语句编写工作量大，熟练度要高</li>
<li>数据库移植性比较差，如果需要切换数据库的话，SQL语句会有很大的差异</li>
</ol>
<h1 id="2-第一个MyBatis项目"><a href="#2-第一个MyBatis项目" class="headerlink" title="2.第一个MyBatis项目"></a>2.第一个MyBatis项目</h1><ol>
<li>创建maven项目</li>
<li>导入相关依赖</li>
</ol>
<h2 id="2-1基本pom文件"><a href="#2-1基本pom文件" class="headerlink" title="2.1基本pom文件"></a>2.1基本pom文件</h2><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mashibing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入所需依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MyBatis依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--MySQL依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-2MyBatis使用小案例"><a href="#2-2MyBatis使用小案例" class="headerlink" title="2.2MyBatis使用小案例"></a>2.2MyBatis使用小案例</h2><h3 id="a-创建与表对应的实体类对象"><a href="#a-创建与表对应的实体类对象" class="headerlink" title="a.创建与表对应的实体类对象"></a>a.创建与表对应的实体类对象</h3><p>Emp实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Integer mgr;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="keyword">private</span> Double common;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(Integer empno, String ename, String job, Integer mgr, Date hiredate, Double sal, Double common, Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">        <span class="keyword">this</span>.common = common;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getEmpno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpno</span><span class="params">(Integer empno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.empno = empno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEname</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJob</span><span class="params">(String job)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.job = job;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMgr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMgr</span><span class="params">(Integer mgr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mgr = mgr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getHiredate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHiredate</span><span class="params">(Date hiredate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hiredate = hiredate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getSal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSal</span><span class="params">(Double sal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getCommon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> common;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommon</span><span class="params">(Double common)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.common = common;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getDeptno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptno</span><span class="params">(Integer deptno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptno = deptno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;empno=&quot;</span> + empno +</span><br><span class="line">                <span class="string">&quot;, ename=&#x27;&quot;</span> + ename + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, job=&#x27;&quot;</span> + job + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mgr=&quot;</span> + mgr +</span><br><span class="line">                <span class="string">&quot;, hiredate=&quot;</span> + hiredate +</span><br><span class="line">                <span class="string">&quot;, sal=&quot;</span> + sal +</span><br><span class="line">                <span class="string">&quot;, common=&quot;</span> + common +</span><br><span class="line">                <span class="string">&quot;, deptno=&quot;</span> + deptno +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="b-创建对应的dao接口"><a href="#b-创建对应的dao接口" class="headerlink" title="b.创建对应的dao接口"></a>b.创建对应的dao接口</h3><p>EmpDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过字段empno查找内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpByEmpno</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="c-编写配置文件"><a href="#c-编写配置文件" class="headerlink" title="c.编写配置文件"></a>c.编写配置文件</h3><h4 id="1-全局配置文件mybatis-config-xml"><a href="#1-全局配置文件mybatis-config-xml" class="headerlink" title="1.全局配置文件mybatis-config.xml"></a>1.全局配置文件mybatis-config.xml</h4><p>tips:可参考官网</p>
<p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入外部properties配置文件,供dataSource使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!--配置数据库连接--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用外部properties配置文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入每一个接口对应.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;EmpDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-db-properties配置文件"><a href="#2-db-properties配置文件" class="headerlink" title="2.db.properties配置文件"></a>2.db.properties配置文件</h4><p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>



<h4 id="3-EmpDao接口映射文件"><a href="#3-EmpDao接口映射文件" class="headerlink" title="3.EmpDao接口映射文件"></a>3.EmpDao接口映射文件</h4><p>EmpDao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--namespace:接口的全类名，表示该映射文件对应的接口是哪个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.mashibing.dao.EmpDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    select:表示这个操作是一个查询操作</span></span><br><span class="line"><span class="comment">    id表示的是要匹配的方法的名称</span></span><br><span class="line"><span class="comment">    resultType:表示返回值的类型，查询操作必须要包含返回值的类型</span></span><br><span class="line"><span class="comment">    #&#123;属性名&#125;：表示要传递的参数的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findEmpByEmpno&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.mashibing.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp where empno = #&#123;empno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-测试文件"><a href="#4-测试文件" class="headerlink" title="4.测试文件"></a>4.测试文件</h4><p>MyTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据全局配置文件创建出SqlSessionFactory</span></span><br><span class="line">        <span class="comment">// SqlSessionFactory:负责创建SqlSession对象的工厂</span></span><br><span class="line">        <span class="comment">// SqlSession:表示跟数据库建立的一次会话</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//mybatis-config.xml全局配置文件在resources目录下的路径</span></span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取读取mybatis-config.xml全局配置文件的InputStream输入流</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//利用SqlSessionFactoryBuilder类的静态build方法构建SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过sqlSessionFactory获取数据库的会话SqlSession</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过SqlSession调用getMapper方法获取要调用的接口类</span></span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用接口类的方法传入参数开始执行操作</span></span><br><span class="line">        Emp empByEmpno = mapper.findEmpByEmpno(<span class="number">7369</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭SqlSession会话</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印查询结果</span></span><br><span class="line">        System.out.println(empByEmpno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis增删改查基本操作</title>
    <url>/2021/03/11/MyBatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="MyBatis增删查改基本操作"><a href="#MyBatis增删查改基本操作" class="headerlink" title="MyBatis增删查改基本操作"></a>MyBatis增删查改基本操作</h1><p>[TOC]</p>
<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EgiK.jpg"></p>
<h2 id="1-增删改查接口类"><a href="#1-增删改查接口类" class="headerlink" title="1.增删改查接口类"></a>1.增删改查接口类</h2><p>EmpDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Emp <span class="title">findEmpByEmpno</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteEmp</span><span class="params">(Integer empno)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertEmp</span><span class="params">(Emp emp)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-接口类对应-xml映射文件"><a href="#2-接口类对应-xml映射文件" class="headerlink" title="2.接口类对应.xml映射文件"></a>2.接口类对应.xml映射文件</h2><p>EmpDao.xml</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--namespace:接口的全类名，表示该映射文件对应的接口是哪个--&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.mashibing.dao.EmpDao&quot;</span>&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    select:表示这个操作是一个查询操作</span><br><span class="line">    id表示的是要匹配的方法的名称</span><br><span class="line">    resultType:表示返回值的类型，查询操作必须要包含返回值的类型</span><br><span class="line">    #&#123;属性名&#125;：表示要传递的参数的名称</span><br><span class="line">    --&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;!--查询--&gt;    </span><br><span class="line">    &lt;select id=<span class="string">&quot;findEmpByEmpno&quot;</span> resultType=<span class="string">&quot;com.mashibing.bean.Emp&quot;</span>&gt;</span><br><span class="line">        select * from emp where empno = #&#123;empno&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;!--增删改操作不需要返回值，增删改返回的是影响的行数，mybatis会自动做判断--&gt;</span><br><span class="line">    &lt;!--插入--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insertEmp&quot;</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">emp</span><span class="params">(empno,ename)</span> <span class="title">values</span><span class="params">(#&#123;empno&#125;,#&#123;ename&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    &lt;!--更新--&gt;</span></span><br><span class="line"><span class="function">    &lt;update id</span>=<span class="string">&quot;updateEmp&quot;</span>&gt;</span><br><span class="line">        update emp set ename=#&#123;ename&#125; where empno = #&#123;empno&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--删除--&gt;</span><br><span class="line">    &lt;delete id=<span class="string">&quot;deleteEmp&quot;</span>&gt;</span><br><span class="line">        delete from emp where empno = #&#123;empno&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>



<h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>MyTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义全局SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Before注解标记的方法会在所有@Test单元测试方法执行之前调用</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 根据全局配置文件创建出SqlSessionFactory</span></span><br><span class="line">        <span class="comment">// SqlSessionFactory:负责创建SqlSession对象的工厂</span></span><br><span class="line">        <span class="comment">// SqlSession:表示跟数据库建议的一次会话</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//mybatis-config.xml全局配置文件的路径</span></span><br><span class="line">        String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//读取mybatis-config.xml全局配置文件的输入流</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用SqlSessionFactoryBuilder类的静态build方法初始化sqlSessionFactory</span></span><br><span class="line">        sqlSessionFactory= <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取数据库的会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 获取要调用的接口类</span></span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用方法开始执行</span></span><br><span class="line">        Emp empByEmpno = mapper.findEmpByEmpno(<span class="number">7369</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭会话</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印查询结果</span></span><br><span class="line">        System.out.println(empByEmpno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取数据库的会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取要调用的接口类</span></span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法开始执行</span></span><br><span class="line">        <span class="keyword">int</span> zhangsan = mapper.insertEmp(<span class="keyword">new</span> Emp(<span class="number">1111</span>, <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印插入操作影响的行数</span></span><br><span class="line">        System.out.println(zhangsan);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//SqlSessionFactory类的无参openSession()方法默认autocommit自动提交为false,所以需要手动调用sqlSession的commit方法</span></span><br><span class="line">        <span class="comment">//也可以通过调用SqlSessionFactory类的有参openSession(boolen autoCommit)方法,传入参数true,设置autocommit自动提交为true,实现自动提交</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭会话</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取数据库的会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取要调用的接口类</span></span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法开始执行</span></span><br><span class="line">        <span class="keyword">int</span> zhangsan = mapper.updateEmp(<span class="keyword">new</span> Emp(<span class="number">1111</span>, <span class="string">&quot;lisi&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印更新操作影响的行数</span></span><br><span class="line">        System.out.println(zhangsan);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//提交</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭会话</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取数据库的会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取要调用的接口类</span></span><br><span class="line">        EmpDao mapper = sqlSession.getMapper(EmpDao.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法开始执行</span></span><br><span class="line">        <span class="keyword">int</span> zhangsan = mapper.deleteEmp(<span class="number">1111</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印删除操作影响的行数</span></span><br><span class="line">        System.out.println(zhangsan);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//提交</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭会话</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门</title>
    <url>/2021/03/19/springboot%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EAhU.jpg"></p>
<h1 id="springboot入门"><a href="#springboot入门" class="headerlink" title="springboot入门"></a>springboot入门</h1><h2 id="1-springboot初始化方法"><a href="#1-springboot初始化方法" class="headerlink" title="1.springboot初始化方法"></a>1.springboot初始化方法</h2><ol>
<li><p>方法一: 登录<a href="https://start.spring.io/%E8%BF%9B%E8%A1%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E5%8E%8B%E7%BC%A9%E5%8C%85">https://start.spring.io/进行基本配置生成项目压缩包</a>, 下载解压, 用IDEA打开使用</p>
<p><a href="https://www.wailian.work/image/QWDX8n"><img src="https://p.130014.xyz/2021/03/19/springboot_init_step.png" alt="springboot_init_step.png"></a></p>
</li>
<li><p>方法二: 直接使用IDEA的spring initializr进行配置</p>
<p><a href="https://www.wailian.work/image/QWDDKq"><img src="https://p.130014.xyz/2021/03/19/springboot_IDEA_1.png" alt="springboot_IDEA_1.png"></a><br><a href="https://www.wailian.work/image/QWD5J1"><img src="https://p.130014.xyz/2021/03/19/springboot_IDEA_2.png" alt="springboot_IDEA_2.png"></a><br><a href="https://www.wailian.work/image/QWDVC4"><img src="https://p.130014.xyz/2021/03/19/springboot_IDEA_3.png" alt="springboot_IDEA_3.png"></a><br><a href="https://www.wailian.work/image/QWDQFV"><img src="https://p.130014.xyz/2021/03/19/springboot_IDEA_4.png" alt="springboot_IDEA_4.png"></a></p>
</li>
</ol>
<h2 id="2-springboot程序入口及测试类"><a href="#2-springboot程序入口及测试类" class="headerlink" title="2.springboot程序入口及测试类"></a>2.springboot程序入口及测试类</h2><ol>
<li>初始化好的springboot项目会自动生成程序入口, 位于自动生成目录下的src\main\java\com\mashibing\SpringbootStudyApplication.java</li>
<li>切记: 入口类不要随意移动, 否则会出现问题, 若移动了需要在类的上方添加@ComponentScan注解, 并指定扫描路径</li>
</ol>
<p><a href="https://www.wailian.work/image/QWDmAe"><img src="https://p.130014.xyz/2021/03/19/springboot.png" alt="springboot.png"></a></p>
<ol start="3">
<li>自动生成的测试类, 位于自动生成目录下的</li>
</ol>
<p>src\test\java\com\mashibing\SpringbootStudyApplicationTests.java</p>
<p><a href="https://www.wailian.work/image/QWDrHG"><img src="https://p.130014.xyz/2021/03/19/springbootc2255b04763f6fad.png" alt="springbootc2255b04763f6fad.png"></a></p>
<h2 id="3-相关pom依赖"><a href="#3-相关pom依赖" class="headerlink" title="3.相关pom依赖"></a>3.相关pom依赖</h2><p>pom.xml springboot项目自动生成的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--parent依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mashibing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot_study<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--JDK版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="4-第一个springboot程序"><a href="#4-第一个springboot程序" class="headerlink" title="4.第一个springboot程序"></a>4.第一个springboot程序</h2><p>与springMVC相关, 发送hello请求, 将方法返回的字符串回调到浏览器并显示</p>
<p>HelloController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello_springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中的@Controller和@ResponseBody可以使用@RestController代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello_springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-application-properties和application-yaml配置文件"><a href="#5-application-properties和application-yaml配置文件" class="headerlink" title="5.application.properties和application.yaml配置文件"></a>5.application.properties和application.yaml配置文件</h2><p>springboot官方推荐使用application.yaml, 若application.properties和application.yaml同时存在springboot会使用application.yaml</p>
<p>application.yaml</p>
<p>注意冒号”:”之后存在的空格, 不可缺少</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改服务器端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  	<span class="attr">gender:</span> <span class="string">男</span></span><br><span class="line">  	<span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">    <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/12/12</span></span><br><span class="line">    <span class="comment">#map集合的写法</span></span><br><span class="line">    <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">    <span class="comment">#list的写法，set与list一致</span></span><br><span class="line">    <span class="attr">likes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">美女</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">学习</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">宝贝</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">编程</span></span><br><span class="line">    <span class="comment">#属性bean写法</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>



<p>application.properties</p>
<p>不太懂</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">person.name</span>=<span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">$&#123;random.int&#125;</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2017/12/15</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#map写法</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">14</span></span><br><span class="line"><span class="comment">#list，set的写法</span></span><br><span class="line"><span class="meta">person.lists</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="comment">#属性对象的写法</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">$&#123;person.hello:hello&#125;_dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">15</span></span><br></pre></td></tr></table></figure>



<h2 id="6-使用-ConfigurationProperties注解读取yaml配置-向bean中注入属性值"><a href="#6-使用-ConfigurationProperties注解读取yaml配置-向bean中注入属性值" class="headerlink" title="6.使用@ConfigurationProperties注解读取yaml配置, 向bean中注入属性值"></a>6.使用@ConfigurationProperties注解读取yaml配置, 向bean中注入属性值</h2><p>Person.java</p>
<p>在类上添加@ConfigurationProperties注解, 声明yaml中配置的前缀, prefix = “ “</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; likes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String gender, Integer age, List&lt;String&gt; likes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.likes = likes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getLikes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> likes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLikes</span><span class="params">(List&lt;String&gt; likes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.likes = likes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, likes=&quot;</span> + likes +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-ConfigurationProperties松散绑定-松散规则"><a href="#7-ConfigurationProperties松散绑定-松散规则" class="headerlink" title="7.@ConfigurationProperties松散绑定(松散规则)"></a>7.@ConfigurationProperties松散绑定(松散规则)</h2><p>在yaml文件中命名类似  last_name  的属性都可以被正常注入bean属性中</p>
<p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">last_name:</span> <span class="string">ming</span></span><br></pre></td></tr></table></figure>

<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="8-JSR303数据校验"><a href="#8-JSR303数据校验" class="headerlink" title="8.JSR303数据校验"></a>8.JSR303数据校验</h2><p>例如邮箱校验, 类上使用@Validated配合属性使用@Email校验邮箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Email注解的使用需要validation依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="9-配置文件的优先级"><a href="#9-配置文件的优先级" class="headerlink" title="9.配置文件的优先级"></a>9.配置文件的优先级</h2><p><a href="https://www.wailian.work/image/QWVI7N"><img src="https://p.130014.xyz/2021/03/20/springboot.png" alt="springboot.png"></a></p>
<p><a href="https://www.wailian.work/image/QWVqrB"><img src="https://p.130014.xyz/2021/03/20/springbootd93ad0f3fb283943.png" alt="springbootd93ad0f3fb283943.png"></a></p>
<p>从上往下优先级越来越低, 推荐使用第三种方式</p>
<h2 id="10-多套配置文件的切换-yaml"><a href="#10-多套配置文件的切换-yaml" class="headerlink" title="10.多套配置文件的切换(.yaml)"></a>10.多套配置文件的切换(.yaml)</h2><p>在resources资源目录下配置多套.yaml配置文件, 在application.yaml主配置文件中添加如下配置切换配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">second</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.wailian.work/image/QWV29R"><img src="https://p.130014.xyz/2021/03/20/springboot9d72762a7613d398.png" alt="springboot9d72762a7613d398.png"></a></p>
<p>注意除主配置文件外, 其他配置文件的文件名均使用 application-xxx.yaml 统一格式, 切换配置文件时 active 的值便是配置文件文件名xxx的值</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot基础入门</title>
    <url>/2021/03/23/springboot%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/Edw.jpg"></p>
<h1 id="maven基础配置springboot"><a href="#maven基础配置springboot" class="headerlink" title="maven基础配置springboot"></a>maven基础配置springboot</h1><h2 id="1-基本pom依赖"><a href="#1-基本pom依赖" class="headerlink" title="1.基本pom依赖"></a>1.基本pom依赖</h2><p>只要是springboot工程就需要在pom中导入父依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-导入外部依赖"><a href="#2-导入外部依赖" class="headerlink" title="2.导入外部依赖"></a>2.导入外部依赖</h2><p>如果你想要开发web项目, 那么你就需要导入web依赖, 如果是其他项目, 导入相关依赖即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="3-关于-SpringBootApplication注解"><a href="#3-关于-SpringBootApplication注解" class="headerlink" title="3.关于@SpringBootApplication注解"></a>3.关于@SpringBootApplication注解</h2><p>一般一个SpringBoot项目中会有一个主程序类, 在这个主程序类的上方我们会加上@SpringBootApplication注解, 代表这是一个主程序类, 用于引导springboot程序的启动, 在主程序类中会有一个main方法, main方法中我们会调用SpringApplication类的run方法, 同时将主程序类, 和args参数传入run方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过查看@SpringBootApplication注解会发现这个注解除了元注解外多了三个注解, 分别是</p>
<ol>
<li>@EnableAutoConfiguration : 启用SpringBoot的自动配置机制</li>
<li>@ComponentScan : 在应用程序所在的软件包上启用扫描</li>
<li>@Configuration : 允许在上下文中注册额外的bean或导入其他配置类</li>
</ol>
<p>所以@SpringBootApplication注解也可以使用这三个注解替代</p>
<h2 id="4-关于SpringBoot默认属性值的修改application-properties配置文件"><a href="#4-关于SpringBoot默认属性值的修改application-properties配置文件" class="headerlink" title="4.关于SpringBoot默认属性值的修改application.properties配置文件"></a>4.关于SpringBoot默认属性值的修改application.properties配置文件</h2><p>在classpath类路径下可以配置application.properties配置文件, 在这个配置文件中我们可以修改springboot的属性默认值, 比如修改tomcat端口号</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server-port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure>



<h2 id="5-关于把项目打成jar包-简化部署"><a href="#5-关于把项目打成jar包-简化部署" class="headerlink" title="5.关于把项目打成jar包, 简化部署"></a>5.关于把项目打成jar包, 简化部署</h2><p>在springboot中提供了一种允许你直接嵌套jar的打包方法, 使用spring-boot-maven-plugin插件, 使用它你只需要在pom中导入相关依赖即可, 依赖导入后在maven中选择LifeCycle -&gt; package, 随后在target目录中就会出现一个项目打包成的jar文件, 在该目录下打开cmd, 输入:  java -jar 包名, 即可运行该程序</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot自动配置特性</title>
    <url>/2021/03/23/springboot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/ElO.jpg"></p>
<h2 id="1-自动配置"><a href="#1-自动配置" class="headerlink" title="1.自动配置"></a>1.自动配置</h2><p>1.在我们导入web依赖时, tomcat将会自动配置好</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.springMVC也将自动配置好</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.自动配置好web常见功能, 如字符编码问题(过滤器)…</p>
<h2 id="2-默认包结构"><a href="#2-默认包结构" class="headerlink" title="2.默认包结构"></a>2.默认包结构</h2><p>1.主程序所在包及其所有子包里面的组件都会被默认扫描进来</p>
<p>2.如需改变扫描路径, 在@SpringBootApplication注解中添加参数scanBasePackages=” “, 指定扫描路径, 或者使用@SpringBootApplication注解中集成的三个注解替换@SpringBootApplication, 在@ComponentScan注解中指定扫描路径</p>
<h2 id="3-属性默认值"><a href="#3-属性默认值" class="headerlink" title="3.属性默认值"></a>3.属性默认值</h2><p>1.各种属性都有默认值, 相应的属性值被映射到相应的类中</p>
<p>2.配置文件的值最终会被绑定到某个类上, 这个类会在容器中创建对象</p>
<h2 id="4-按需加载所有自动配置项"><a href="#4-按需加载所有自动配置项" class="headerlink" title="4.按需加载所有自动配置项"></a>4.按需加载所有自动配置项</h2><p>1.引入了哪些场景, 这个场景的自动配置才会开启</p>
<p>2.springboot所有的自动配置功能都在spring-boot-autoconfigure里面</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot依赖管理特性</title>
    <url>/2021/03/23/springboot%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EfNL.jpg"></p>
<h2 id="1-父项目的依赖管理"><a href="#1-父项目的依赖管理" class="headerlink" title="1.父项目的依赖管理"></a>1.父项目的依赖管理</h2><p>pom文件中的父项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目的父项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在spring-boot-dependencies中几乎包含了我们开发中所有常用的依赖版本号, 所以一般在开发中我们导入依赖时不用写版本号, 如果我们需要改变依赖版本, 有如下两种方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.直接在pom中加properties标签, 设置依赖版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.在引入的依赖中添加version标签, 设置依赖版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-springboot场景启动器spring-boot-starter"><a href="#2-springboot场景启动器spring-boot-starter" class="headerlink" title="2.springboot场景启动器spring-boot-starter"></a>2.springboot场景启动器spring-boot-starter</h2><ol>
<li><p>spring-boot-starter-*, *就某种场景启动器, 只要引入starter ,这个场景的所有常规需要的依赖我们都自动引入</p>
</li>
<li><p>见到的*-spring-boot-starter, 这些都是第三方为我们提供的简化开发的场景启动器</p>
</li>
<li><p>所有场景启动器最底层的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>底层注解@Import</title>
    <url>/2021/03/23/%E5%BA%95%E5%B1%82%E6%B3%A8%E8%A7%A3-Import/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/Es4N.jpg"></p>
<p><strong>@Import注解用于容器中的组件类之上, 比如</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@Component</span><br><span class="line">@Controller</span><br><span class="line">@Service</span><br><span class="line">@Repository</span><br><span class="line">@Configuration</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Cat.class,Person.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person zhangsan = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        zhangsan.setCat(cat01()); <span class="comment">//依赖cat01方法</span></span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>用于给容器中自动创建出给定类的组件, 默认组件名为全类名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.mashibing.entity.Cat</span><br><span class="line">com.mashibing.entity.Person</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>底层注解@Configuration</title>
    <url>/2021/03/23/%E5%BA%95%E5%B1%82%E6%B3%A8%E8%A7%A3-Configuration/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/Es4.jpg"></p>
<p><strong>@Configuration注解</strong></p>
<p>1.加在类上告诉springboot这是一个配置类 == 配置文件, 同时这个类也会作为一个组件加入容器中, id为类名首字母小写</p>
<p>2.类中加了@Bean注解的方法, 会给容器添加组件, 以方法名为id, 返回类型为组件类型, 返回值就是组件在容器中的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意: 在@Configuration中存在一个属性proxyBeanMethods, 默认值为true</strong></p>
<p>1.当值为true时, 从容器中获取这个类实例时, 得到的是一个代理对象, 使用代理对象调用带有@Bean注解的方法时, springboot总会检查这个组件是否在容器中存在, 若存在, 直接返回 (保持组件单实例)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.mashibing.config.MyConfig$$EnhancerBySpringCGLIB$$7d9469fa@3569edd5</span><br></pre></td></tr></table></figure>

<p>2.当值为false时, 从容器中获取这个类实例时, 得到的是容器中的实例对象, 使用实例对象调用带有@Bean注解的方法时, 每次返回的对象都是不同的, </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.mashibing.config.MyConfig@d4602a</span><br></pre></td></tr></table></figure>



<p><strong>Full和Lite</strong></p>
<p>Full (proxyBeanMethods = true) : full模式</p>
<p>Lite(proxyBeanMethods = false) : 轻量级模式</p>
<ul>
<li>配置类组件之间<strong>无</strong>依赖关系, 用Lite模式加速容器启动过程, 减少判断</li>
<li>配置类组件之间<strong>有</strong>依赖关系, 方法会被调用, 得到之前单实例组件, 用Full模式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person zhangsan = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        zhangsan.setCat(cat01()); <span class="comment">//依赖cat01方法</span></span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot自动配置原理入门</title>
    <url>/2021/03/24/springboot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/Eo9Q.jpg"></p>
<h3 id="引导加载自动配置类"><a href="#引导加载自动配置类" class="headerlink" title="引导加载自动配置类"></a>引导加载自动配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br></pre></td></tr></table></figure>

<p>上述注解由下列注解组成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="1-SpringBootConfiguration"><a href="#1-SpringBootConfiguration" class="headerlink" title="1.@SpringBootConfiguration"></a>1.@SpringBootConfiguration</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br></pre></td></tr></table></figure>

<p>这个注解由@Configuration注解组成, 也就是说代表这是一个配置类,  也就是主程序类是一个配置类(核心配置类)</p>
<h4 id="2-ComponentScan"><a href="#2-ComponentScan" class="headerlink" title="2.@ComponentScan"></a>2.@ComponentScan</h4><p>指定扫描哪些注解</p>
<h4 id="3-EnableAutoConfiguration"><a href="#3-EnableAutoConfiguration" class="headerlink" title="3.@EnableAutoConfiguration"></a>3.@EnableAutoConfiguration</h4><p>这个注解由下面两个注解组成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br></pre></td></tr></table></figure>



<h5 id="a-AutoConfigurationPackage"><a href="#a-AutoConfigurationPackage" class="headerlink" title="a.@AutoConfigurationPackage"></a>a.@AutoConfigurationPackage</h5><p>在@AutoConfigurationPackage注解中我们发现他含有以下一个注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br></pre></td></tr></table></figure>

<p>通过@Import注解, 我们发现他导入了一个组件Registrar, 用于批量注册组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">		register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImports(metadata));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过Registrar将指定的一个包下的所有组件导入进来(也就是<strong>主程序类</strong>所在包)</p>
<h5 id="b-Import-AutoConfigurationImportSelector-class"><a href="#b-Import-AutoConfigurationImportSelector-class" class="headerlink" title="b.@Import(AutoConfigurationImportSelector.class)"></a>b.@Import(AutoConfigurationImportSelector.class)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.利用getAutoConfigurationEntry(AnnotationMetadata annotationMetadata)给容器中导入一些组件</span><br><span class="line">2.利用getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class="line">3.利用loadSpringFactories(@Nullable ClassLoader classLoader)加载得到所有组件</span><br><span class="line">4.从&quot;META-INF&#x2F;spring.factories&quot;位置加载一个文件</span><br><span class="line">	默认扫描我们系统中所有&quot;META-INF&#x2F;spring.factories&quot;位置的文件</span><br><span class="line">	spring-boot-autoconfigure-2.3.9.RELEASE.jar包里面也有&quot;META-INF&#x2F;spring.factories&quot;</span><br></pre></td></tr></table></figure>



<h4 id="4-按需开启自动配置项"><a href="#4-按需开启自动配置项" class="headerlink" title="4.按需开启自动配置项"></a>4.按需开启自动配置项</h4><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载, 但是按照条件装配规则, 最终会按需配置</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>底层注解-ImportResource</title>
    <url>/2021/03/24/%E5%BA%95%E5%B1%82%E6%B3%A8%E8%A7%A3-ImportResource/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EXpu.jpg"></p>
<p>@ImportResource : 用于导入spring配置文件, 当我们使用了xml编写bean对象时, 我们可以在任意的类上方添加这个注解, 用于将xml配置文件中的组件注入容器中</p>
<p>spring.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mashibing.entity.Cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狗狗一号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;xiaoming01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mashibing.entity.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;天才一号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个普通类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Cat.class,Person.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="meta">@ImportResource(locations = &quot;classpath:beans.xml&quot;)</span> <span class="comment">//用于导入spring配置文件中的组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = &quot;cat01&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person zhangsan = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        zhangsan.setCat(cat01()); <span class="comment">//依赖cat01方法</span></span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>底层注解-ConfigurationProperties</title>
    <url>/2021/03/24/%E5%BA%95%E5%B1%82%E6%B3%A8%E8%A7%A3-ConfigurationProperties/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EYyZ.jpg"></p>
<h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><h3 id="1-方法一-ConfigurationProperties-一个可以把当前类注册为组件的注解"><a href="#1-方法一-ConfigurationProperties-一个可以把当前类注册为组件的注解" class="headerlink" title="1.方法一: @ConfigurationProperties + 一个可以把当前类注册为组件的注解"></a>1.方法一: @ConfigurationProperties + 一个可以把当前类注册为组件的注解</h3><p>@ConfigurationProperties : 配置绑定, 用于将springboot配置文件中设置的属性值自动绑定到对应的对象属性中</p>
<p>注意: 只有在容器中的组件, 才会拥有springboot提供的强大功能, 所以需要将对应类注册为组件</p>
<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mycar.brand</span>=<span class="string">保时捷</span></span><br><span class="line"><span class="meta">mycar.price</span>=<span class="string">999999</span></span><br></pre></td></tr></table></figure>

<p>Car.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//把当前类注入容器, 成为一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand, Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-方法二-ConfigurationProperties-EnableConfigurationProperties"><a href="#2-方法二-ConfigurationProperties-EnableConfigurationProperties" class="headerlink" title="2.方法二: @ConfigurationProperties + @EnableConfigurationProperties"></a>2.方法二: @ConfigurationProperties + @EnableConfigurationProperties</h3><p>在<strong>配置类</strong>上使用@EnableConfigurationProperties注解, 同时指定将哪个类注册, 被注册的类只需要加上@ConfigurationProperties注解即可使用配置绑定, 无需其他注解</p>
<p>@EnableConfigurationProperties功能:</p>
<p>​                                                                    1.开启配置绑定</p>
<p>​                                                                    2.把类注册入容器</p>
<p>Car.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand, Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Cat.class,Person.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="meta">@ImportResource(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span> <span class="comment">//设置哪些类可以使用配置绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = &quot;cat01&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person zhangsan = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        zhangsan.setCat(cat01()); <span class="comment">//依赖cat01方法</span></span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>底层注解-Conditional</title>
    <url>/2021/03/24/%E5%BA%95%E5%B1%82%E6%B3%A8%E8%A7%A3-Conditional/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/Es4a.jpg"></p>
<h3 id="1-Conditional-条件装配-满足Conditional-指定的条件-则进行组件注入"><a href="#1-Conditional-条件装配-满足Conditional-指定的条件-则进行组件注入" class="headerlink" title="1.@Conditional : 条件装配, 满足Conditional 指定的条件, 则进行组件注入"></a>1.@Conditional : 条件装配, 满足Conditional 指定的条件, 则进行组件注入</h3><h3 id="2-与-Conditional相关的条件装配注解"><a href="#2-与-Conditional相关的条件装配注解" class="headerlink" title="2.与@Conditional相关的条件装配注解"></a>2.与@Conditional相关的条件装配注解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ConditionalOnClass</span><br><span class="line">@ConditionalOnMissingClass</span><br><span class="line">@ConditionalOnBean</span><br><span class="line">@ConditionalOnMissingBean</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h3 id="3-当-Conditional注解位于类上时表示如果条件不满足则该类中所有的组件都不会被注入容器-满足条件就注入"><a href="#3-当-Conditional注解位于类上时表示如果条件不满足则该类中所有的组件都不会被注入容器-满足条件就注入" class="headerlink" title="3.当@Conditional注解位于类上时表示如果条件不满足则该类中所有的组件都不会被注入容器, 满足条件就注入"></a>3.当@Conditional注解位于类上时表示如果条件不满足则该类中所有的组件都不会被注入容器, 满足条件就注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean(name = &quot;cat01&quot;)</span> <span class="comment">//条件: 容器中需要存在id为cat01的组件</span></span><br><span class="line"><span class="meta">@Import(&#123;Cat.class,Person.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person zhangsan = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        zhangsan.setCat(cat01()); <span class="comment">//依赖cat01方法</span></span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-当-Conditional注解位于方法上时表示如果满足条件那么这个组件就被注入容器-否则不注入"><a href="#4-当-Conditional注解位于方法上时表示如果满足条件那么这个组件就被注入容器-否则不注入" class="headerlink" title="4.当@Conditional注解位于方法上时表示如果满足条件那么这个组件就被注入容器, 否则不注入"></a>4.当@Conditional注解位于方法上时表示如果满足条件那么这个组件就被注入容器, 否则不注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Cat.class,Person.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">cat01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = &quot;cat01&quot;)</span> <span class="comment">//条件: 容器中需要存在id为cat01的组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person zhangsan = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        zhangsan.setCat(cat01()); <span class="comment">//依赖cat01方法</span></span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>lombok</title>
    <url>/2021/03/24/lombok/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EVnX.jpg"></p>
<h5 id="lombok基础注解-及其用法"><a href="#lombok基础注解-及其用法" class="headerlink" title="lombok基础注解, 及其用法"></a>lombok基础注解, 及其用法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data   用于生成类属性的Getter和Setter方法</span><br><span class="line">    </span><br><span class="line">@ToString   生成toString方法</span><br><span class="line">   </span><br><span class="line">@NoArgsConstructor   生成无参构造方法</span><br><span class="line">@AllArgsConstructor  生成全参构造方法</span><br><span class="line">    </span><br><span class="line">@EqualsAndHashCode   生成equals和hashCode方法</span><br><span class="line">    </span><br><span class="line">@Slf4j   日志注解</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot生成自己的元信息</title>
    <url>/2021/03/25/springboot%E7%94%9F%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%83%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EUNe.jpg"></p>
<p>当我们在springboot项目中为某个类在配置文件中配置默认属性值时通过以下注解可以生成我们自己的元信息, 从而在配置文件中编写时拥有自动提示, 只需要在pom文件中加入以下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot源码分析之静态资源管理</title>
    <url>/2021/03/25/springboot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EU.jpg"></p>
<ul>
<li>springboot启动默认加载 xxxAutoConfiguration类(自动配置类)</li>
<li>springMVC功能的自动配置类: WebMvcAutoConfiguration</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(-2147483638)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在WebMvcAutoConfiguration类中我们发现下面这个类</p>
<ul>
<li><p>给容器配了什么 ?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(&#123;WebMvcAutoConfiguration.EnableWebMvcConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;WebMvcProperties.class, ResourceProperties.class, WebProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置文件的相关属性和xxx进行了绑定, </p>
<p>WebMvcProperties == spring.mvc    </p>
<p>ResourceProperties == spring.resources</p>
<p>WebProperties == spring.web</p>
</li>
<li><p>在WebMvcAutoConfigurationAdapter类中我们发现他只有一个有参构造器</p>
<p>注意: 有参构造器所有的参数都会从容器中确定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    WebProperties webProperties, </span></span></span><br><span class="line"><span class="function"><span class="params">    WebMvcProperties mvcProperties, 			                                           ListableBeanFactory beanFactory,           								             ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider, ObjectProvider&lt;WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider, </span></span></span><br><span class="line"><span class="function"><span class="params">    ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath, ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">            <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">            <span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">            <span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = (WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer)resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">            <span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">            <span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">            <span class="keyword">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>WebProperties webProperties :                      获取和spring.web绑定的所有的值的对象</li>
<li>WebMvcProperties mvcProperties :               获取和spring.mvc绑定的所有的值的对象</li>
<li>ListableBeanFactory beanFactory  :               spring的beanFactory  </li>
<li>HttpMessageConverters  :                               找到所有的HttpMessageConverters</li>
<li>ResourceHandlerRegistrationCustomizer  :  找到资源处理器的自定义器</li>
<li>DispatcherServletPath  :                                    </li>
<li>ServletRegistrationBean  :                                给应用注册Servlet, Filter……</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot开发web之静态资源</title>
    <url>/2021/03/25/springboot%E5%BC%80%E5%8F%91web%E4%B9%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EUGv.jpg"></p>
<h5 id="1-静态资源目录"><a href="#1-静态资源目录" class="headerlink" title="1.静态资源目录"></a>1.静态资源目录</h5><ol>
<li>默认情况下静态资源放在类路径下的 /static 或者 /public 或者 /resources 或者 /META-INF/resources</li>
<li>访问静态资源: 当前项目路径/ + 静态资源名</li>
<li>原理: 默认静态映射为 /**</li>
<li>当有请求进来时, 先去controller看能不能处理, 不能处理就将请求交给静态资源处理器, 如果静态资源也不能处理就返回404</li>
</ol>
<h5 id="2-修改静态资源访问前缀"><a href="#2-修改静态资源访问前缀" class="headerlink" title="2.修改静态资源访问前缀"></a>2.修改静态资源访问前缀</h5><p>在yml配置文件中配置静态资源访问前缀</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/resources/**</span></span><br></pre></td></tr></table></figure>

<p>修改后我们访问静态资源时为: 当前项目路径/resources/ + 静态资源名</p>
<h5 id="3-修改静态资源目录"><a href="#3-修改静态资源目录" class="headerlink" title="3.修改静态资源目录"></a>3.修改静态资源目录</h5><p>在yml配置文件中配置静态资源访问目录</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>

<p>修改后当我们访问静态资源时, 静态资源的查找目录就变成了 classpath:/haha/  而不是之前默认的那四个目录</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot欢迎页面</title>
    <url>/2021/03/25/springboot%E6%AC%A2%E8%BF%8E%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EUG.jpg"></p>
<h5 id="1-欢迎页面"><a href="#1-欢迎页面" class="headerlink" title="1.欢迎页面"></a>1.欢迎页面</h5><p>springboot支持两种欢迎页面, 一种是静态资源中的index.html, 和模板中的index, 只要其中一种被找到,他就会被作为欢迎页面使用</p>
<p>注意: 如果我们设置了静态资源访问前缀, 那么欢迎页面会受到影响, 但是静态资源目录还是可以随意修改</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/resources/**</span>      <span class="comment">#会影响欢迎页面</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]  <span class="comment">#不会影响欢迎页面</span></span><br></pre></td></tr></table></figure>



<h5 id="2-favicon-ico页面图标"><a href="#2-favicon-ico页面图标" class="headerlink" title="2.favicon.ico页面图标"></a>2.favicon.ico页面图标</h5><p>springboot中页面图标是一个静态资源, 图标名字规定为: favicon.ico 位于静态资源目录下, 但是他会受到静态资源访问前缀的影响</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/resources/**</span>      <span class="comment">#会影响页面图标</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]  <span class="comment">#不会影响页面图标</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot请求处理-常用参数注解</title>
    <url>/2021/03/26/springboot%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/EqDV.jpg"></p>
<h5 id="1-PathVariable"><a href="#1-PathVariable" class="headerlink" title="1.@PathVariable"></a>1.@PathVariable</h5><p>用于将请求路径中的值绑定到方法参数中, 可以使用map绑定所有路径中的参数, 但是map必须是map&lt;String,String&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/car/&#123;id&#125;/username/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable(&quot;name&quot;)</span>String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; allpa)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>,id);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        map.put(<span class="string">&quot;allpa&quot;</span>,allpa);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-RequestHeader"><a href="#2-RequestHeader" class="headerlink" title="2.@RequestHeader"></a>2.@RequestHeader</h5><p>获取请求头中的信息, 将指定请求头中的信息绑定到方法参数, 可以使用map绑定请求头中所有的信息, 但是map必须是map&lt;String,String&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader(&quot;Connection&quot;)</span> String connection,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader(&quot;Host&quot;)</span> String host,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; headMap)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;connection&quot;</span>,connection);</span><br><span class="line">        map.put(<span class="string">&quot;host&quot;</span>,host);</span><br><span class="line">        map.put(<span class="string">&quot;headMap&quot;</span>,headMap);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-RequestParam"><a href="#3-RequestParam" class="headerlink" title="3.@RequestParam"></a>3.@RequestParam</h5><p>将请求中携带的参数绑定到方法参数上, 也可以使用map绑定所有参数, 但是map必须是map&lt;String,String&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam(&quot;gender&quot;)</span> String gender,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; paraMap)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;gender&quot;</span>,gender);</span><br><span class="line">        map.put(<span class="string">&quot;paraMap&quot;</span>,paraMap);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-CookieValue"><a href="#4-CookieValue" class="headerlink" title="4.@CookieValue"></a>4.@CookieValue</h5><p>这个注解将cookie值绑定到方法参数, 也可以使用Cookie接收绑定, 这将会绑定所有的cookie值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@CookieValue(&quot;Webstorm-21943b8e&quot;)</span> String cookie,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@CookieValue(&quot;Webstorm-21943b8e&quot;)</span> Cookie cookie2)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;cookie&quot;</span>,cookie);</span><br><span class="line">        map.put(<span class="string">&quot;cookie2&quot;</span>,cookie2);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="5-RequestBody"><a href="#5-RequestBody" class="headerlink" title="5.@RequestBody"></a>5.@RequestBody</h5><p>必须是post请求, 将请求体中的 k v 键值对绑定到方法参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/car&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;h1&gt;欢迎来到老色批的主页&lt;/h1&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/car&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="6-RequestAttribute"><a href="#6-RequestAttribute" class="headerlink" title="6.@RequestAttribute"></a>6.@RequestAttribute</h5><p>将请求域中的属性绑定到方法参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">goToPage</span><span class="params">(HttpServletRequest httpServletRequest)</span></span>&#123;</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">&quot;age&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">success</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="meta">@RequestAttribute(&quot;name&quot;)</span>String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="meta">@RequestAttribute(&quot;age&quot;)</span>Integer age,</span></span></span><br><span class="line"><span class="function"><span class="params">                    HttpServletRequest httpServletRequest</span></span></span><br><span class="line"><span class="function"><span class="params">                    )</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Object name1 = httpServletRequest.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;name1&quot;</span>,name1);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-MatrixVariable"><a href="#7-MatrixVariable" class="headerlink" title="7.@MatrixVariable"></a>7.@MatrixVariable</h5><p>矩阵变量, springboot默认禁用了矩阵变量功能, 在springboot中的UrlPathHelper设置setRemoveSemicolonContent为true, 也就是说, 默认移除分号后的内容, 想要使用矩阵变量就需要改变这个属性,</p>
<p>方法一: 实现WebMvcConfigurer接口, 重写configurePathMatch方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>方法二: 在容器中注册一个重写了configurePathMatch方法的WebMvcConfigurer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebMvcConfigurer webMvcConfigurer = <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">                UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">                urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> webMvcConfigurer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>@MatrixVariable注解就是把矩阵变量的值绑定到方法参数上</p>
<p>一个请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:8080&#x2F;tui&#x2F;meitui;changdu&#x3D;90,80,85;wazi&#x3D;heisi,baisi;chuxi&#x3D;zc,cx</span><br></pre></td></tr></table></figure>

<ul>
<li>在这个请求中changdu和wazi和baisi都是矩阵变量, 如果变量只有一个值, 那么直接用分号结束, 如果有多个可以使用逗号隔开</li>
<li>meitui作为一个PathVariable存在</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/tui/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">tuim</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@MatrixVariable(&quot;changdu&quot;)</span> List&lt;Integer&gt; cd,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@MatrixVariable(&quot;wazi&quot;)</span> List&lt;String&gt; siwa,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@MatrixVariable(&quot;chuxi&quot;)</span> List&lt;String&gt; cx</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@PathVariable(&quot;path&quot;)</span> String path</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;changdu&quot;</span>,cd);</span><br><span class="line">        map.put(<span class="string">&quot;wazi&quot;</span>,siwa);</span><br><span class="line">        map.put(<span class="string">&quot;chuxi&quot;</span>,cx);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;path&quot;:&quot;meitui&quot;,&quot;chuxi&quot;:[&quot;zc&quot;,&quot;cx&quot;],&quot;changdu&quot;:[90,80,85],&quot;wazi&quot;:[&quot;heisi&quot;,&quot;baisi&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>如果在多个PathVariable中存在相同名字的矩阵变量, 那么可以使用@MatrixVariable的pathVar属性指定想要绑定到方法参数的变量是哪个PathVariable的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:8080&#x2F;car&#x2F;good;price&#x3D;99999&#x2F;bad;price&#x3D;666</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/car/&#123;good&#125;/&#123;bad&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsCell</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@MatrixVariable(pathVar = &quot;good&quot;,value = &quot;price&quot;)</span>Integer price,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@MatrixVariable(pathVar = &quot;bad&quot;,value = &quot;price&quot;)</span>Integer price2,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@PathVariable(&quot;good&quot;)</span>String path</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;price&quot;</span>,price);</span><br><span class="line">        map.put(<span class="string">&quot;price2&quot;</span>,price2);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot之模板引擎Thymeleaf</title>
    <url>/2021/03/28/springboot%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EThymeleaf/</url>
    <content><![CDATA[<h5 id="1-使用thymelead"><a href="#1-使用thymelead" class="headerlink" title="1.使用thymelead"></a>1.使用thymelead</h5><p>导入starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2-thymelead自动配置"><a href="#2-thymelead自动配置" class="headerlink" title="2.thymelead自动配置"></a>2.thymelead自动配置</h5><p>在ThymeleafProperties中已经配置好了一些基本属性, 比如页面的访问前缀和后缀, 我们只需要在classpath目录下编写html页面即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure>



<h5 id="3-命名空间和-th"><a href="#3-命名空间和-th" class="headerlink" title="3.命名空间和$ @ th:"></a>3.命名空间和$ @ th:</h5><p>在html页面中我们使用thymelead需要导入thymelead的命名空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用于替换文本的 th:text , 在下面这个标签中 “哈哈哈” 将会被替换成 “这个改写text”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;这个改写text&quot;</span>&gt;</span>哈哈哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面这个 “啦啦啦” 将会被替换成请求域中msg的属性值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>啦啦啦啦<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>th:href就是替换链接</p>
</li>
<li><p>$:  下面的第一条链接会被替换成请求域中link的属性值</p>
</li>
<li><p>@:  下面第二条链接会被直接替换成中括号的内容, 如果设置了应用程序上下文路径, 他会自动添加相关路径</p>
</li>
<li><p>```yml<br>server:<br>  servlet:</p>
<pre><code>context-path: /application
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 下面的第三条链接会被直接替换成th:href的文本内容</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">    &lt;a href&#x3D;&quot;www.baidu.com&quot; th:href&#x3D;&quot;$&#123;link&#125;&quot;&gt;百度1&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;www.baidu.com&quot; th:href&#x3D;&quot;@&#123;&#x2F;link&#x2F;aaaaa&#125;&quot;&gt;百度2&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;www.baidu.com&quot; th:href&#x3D;&quot;ppppppppppppp&quot;&gt;百度3&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis的基本使用一</title>
    <url>/2021/04/28/MyBatis%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%B8%80/</url>
    <content><![CDATA[<h1 id="MyBatis的基本使用一"><a href="#MyBatis的基本使用一" class="headerlink" title="MyBatis的基本使用一"></a>MyBatis的基本使用一</h1><p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/Esl5l.jpg"></p>
<h6 id="1-导入maven依赖"><a href="#1-导入maven依赖" class="headerlink" title="1.导入maven依赖"></a>1.导入maven依赖</h6><p>使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="2-mapper接口"><a href="#2-mapper接口" class="headerlink" title="2.mapper接口"></a>2.mapper接口</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">  <span class="function">Blog <span class="title">selectBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="3-mapper接口对应的xml文件"><a href="#3-mapper接口对应的xml文件" class="headerlink" title="3.mapper接口对应的xml文件"></a>3.mapper接口对应的xml文件</h6><p>MyBatis 提供的所有特性都可以利用基于 XML 的映射语言来实现，这使得 MyBatis 在过去的数年间得以流行。如果你用过旧版本的 MyBatis，你应该对这个概念比较熟悉。 但相比于之前的版本，新版本改进了许多 XML 的配置。这里给出一个基于 XML 映射语句的示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="4-核心配置文件"><a href="#4-核心配置文件" class="headerlink" title="4.核心配置文件"></a>4.核心配置文件</h6><p>XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。</p>
<p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    //引入外部properties配置文件</span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      //mapper映射</span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>properties配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql-driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">mysql-url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">mysql-username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">mysql-password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>



<h6 id="5-从xml中构建SqlSessionFactory"><a href="#5-从xml中构建SqlSessionFactory" class="headerlink" title="5.从xml中构建SqlSessionFactory"></a>5.从xml中构建SqlSessionFactory</h6><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p>
<p>从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:// URL 构造的输入流。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>



<h6 id="6-从-SqlSessionFactory-中获取-SqlSession"><a href="#6-从-SqlSessionFactory-中获取-SqlSession" class="headerlink" title="6.从 SqlSessionFactory 中获取 SqlSession"></a>6.从 SqlSessionFactory 中获取 SqlSession</h6><p>既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis基本使用XML配置</title>
    <url>/2021/04/30/MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8XML%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ml20001005/imgs//data/El0D.jpg"></p>
<h1 id="MyBatis-XML配置"><a href="#MyBatis-XML配置" class="headerlink" title="MyBatis XML配置"></a>MyBatis XML配置</h1><h6 id="1-xml结构概览"><a href="#1-xml结构概览" class="headerlink" title="1.xml结构概览"></a>1.xml结构概览</h6><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p>
<ul>
<li>configuration（配置）<ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties">properties（属性）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings（设置）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">typeAliases（类型别名）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a></li>
<li>environments（环境配置）<ul>
<li>environment（环境变量）<ul>
<li>transactionManager（事务管理器）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider">databaseIdProvider（数据库厂商标识）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">mappers（映射器）</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>注意:  必须严格按照顺序编写xml配置, 否则会报错</p>
</blockquote>
<h6 id="2-各项配置的基本使用"><a href="#2-各项配置的基本使用" class="headerlink" title="2.各项配置的基本使用"></a>2.各项配置的基本使用</h6><ul>
<li><h3 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties )"></a>属性(properties )</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dev_user&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F2Fa3!33TYyg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>resource: 引入类路径下的properties配置文件</code></p>
<p><code>如果在外部配置文件中和properties 元素的子元素中存在同名的元素, 优先使用外部配置文件中的元素值</code></p>
</li>
<li><h3 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p>
<blockquote>
<p><em>以下是常用的几个设置</em></p>
</blockquote>
<table>
<thead>
<tr>
<th>设置名</th>
<th>描述</th>
<th>有效值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>cacheEnabled</td>
<td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td>true|false</td>
<td>true</td>
</tr>
<tr>
<td>useGeneratedKeys</td>
<td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>
<td>true|false</td>
<td>False</td>
</tr>
<tr>
<td>mapUnderscoreToCamelCase</td>
<td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>
<td>true|false</td>
<td>False</td>
</tr>
<tr>
<td>logImpl</td>
<td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td>SLF4J|LOG4J|LOG4J2|JDK_LOGGING|COMMONS_LOGGING|STDOUT_LOGGING|NO_LOGGING</td>
<td>未设置</td>
</tr>
</tbody></table>
<p><code>cacheEnabled</code>: 一级缓存默认是开启的, 设置二级缓存时建议也显示的设置缓存开启, 尽管默认情况缓存是开启的</p>
<p>开启二级缓存, 在SQL 映射文件中添加一行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可设置更多属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;cache</span><br><span class="line">  eviction=&quot;FIFO&quot;</span><br><span class="line">  flushInterval=&quot;60000&quot;</span><br><span class="line">  size=&quot;512&quot;</span><br><span class="line">  readOnly=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure>



<p><code>useGeneratedKeys</code>: 对于支持自动生成记录主键的数据库，如：MySQL，SQL Server，此时设置useGeneratedKeys参数值为true，在执行添加记录之后可以获取到数据库自动生成的主键ID。如下代码, 在设置中开启<code>useGeneratedKeys</code>设置, 该插入操作, 数据库表中自动生成的主键id值将会返回, 并赋值给实体对象的id属性, 若有多个列会自动生成, 可以指定具体的列名<code>keyColumn=&quot;&quot;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ml.pojo.Book&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into book(book_name,price) values(#&#123;book_name&#125;,#&#123;price&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>mapUnderscoreToCamelCase</code>: 是否开启驼峰命名自动映射, 数据库中常见列名存在下划线, 例如book_name, 此时如果要将该列映射到实体类中, 那么实体类属性值就需命名为book_name, 但是java中常见属性命名为bookName, 这与常规不符, 此时开启驼峰命名自动映射可以使数据库中以下划线命名的列直接映射到常见java属性上, 也就是book_name可以直接映射到bookName</p>
<p><code>logImpl</code>: 配置日志</p>
<ul>
<li><p>第一步: 导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第二步: <code>log4j.properties</code>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局日志配置</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">ERROR, stdout</span></span><br><span class="line"><span class="comment"># MyBatis 日志配置</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis.example.BlogMapper</span>=<span class="string">TRACE</span></span><br><span class="line"><span class="comment"># 控制台输出</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure>

<p>上述配置将使 Log4J 详细打印 <code>org.mybatis.example.BlogMapper</code> 的日志</p>
</li>
</ul>
<ul>
<li><h3 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h3><p>​    类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Comment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Comment&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Post&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Section&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Section&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Tag&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Tag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><h3 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h3><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等。例如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="line">&lt;!-- 建议使用 --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper resource=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br><span class="line">  &lt;mapper resource=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span><br><span class="line">  &lt;mapper resource=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper url=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br><span class="line">  &lt;mapper url=<span class="string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span><br><span class="line">  &lt;mapper url=<span class="string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><br><span class="line">注意: 使用这种方法mapper接口和映射文件需要在同一目录下</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br><span class="line">  &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span><br><span class="line">  &lt;mapper <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><br><span class="line">注意: 使用这种方法mapper接口和映射文件需要在同一目录下</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;<span class="keyword">package</span> name=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure>

<p>这些配置会告诉 MyBatis 去哪里找映射文件</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
